//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFWPFClient.MyServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsernameReservedFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
    [System.SerializableAttribute()]
    public partial class UsernameReservedFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidLoginFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
    [System.SerializableAttribute()]
    public partial class InvalidLoginFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidLogoutFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
    [System.SerializableAttribute()]
    public partial class InvalidLogoutFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IncorrectDataFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
    [System.SerializableAttribute()]
    public partial class IncorrectDataFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Users", Namespace="http://schemas.datacontract.org/2004/07/WCFService")]
    [System.SerializableAttribute()]
    public partial class Users : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnsuccesfullSearchFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
    [System.SerializableAttribute()]
    public partial class UnsuccesfullSearchFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Uid {
            get {
                return this.UidField;
            }
            set {
                if ((object.ReferenceEquals(this.UidField, value) != true)) {
                    this.UidField = value;
                    this.RaisePropertyChanged("Uid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CarRegistry", Namespace="http://schemas.datacontract.org/2004/07/WCFService")]
    [System.SerializableAttribute()]
    public partial class CarRegistry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DistanceTraveledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EngineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicensePlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductionYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransmissionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Condition {
            get {
                return this.ConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionField, value) != true)) {
                    this.ConditionField = value;
                    this.RaisePropertyChanged("Condition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DistanceTraveled {
            get {
                return this.DistanceTraveledField;
            }
            set {
                if ((this.DistanceTraveledField.Equals(value) != true)) {
                    this.DistanceTraveledField = value;
                    this.RaisePropertyChanged("DistanceTraveled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Engine {
            get {
                return this.EngineField;
            }
            set {
                if ((object.ReferenceEquals(this.EngineField, value) != true)) {
                    this.EngineField = value;
                    this.RaisePropertyChanged("Engine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicensePlateNumber {
            get {
                return this.LicensePlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.LicensePlateNumberField, value) != true)) {
                    this.LicensePlateNumberField = value;
                    this.RaisePropertyChanged("LicensePlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductionYear {
            get {
                return this.ProductionYearField;
            }
            set {
                if ((this.ProductionYearField.Equals(value) != true)) {
                    this.ProductionYearField = value;
                    this.RaisePropertyChanged("ProductionYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Transmission {
            get {
                return this.TransmissionField;
            }
            set {
                if ((object.ReferenceEquals(this.TransmissionField, value) != true)) {
                    this.TransmissionField = value;
                    this.RaisePropertyChanged("Transmission");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyServiceReference.IMyService")]
    public interface IMyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Register", ReplyAction="http://tempuri.org/IMyService/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.UsernameReservedFault), Action="http://tempuri.org/IMyService/RegisterUsernameReservedFaultFault", Name="UsernameReservedFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        bool Register(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Register", ReplyAction="http://tempuri.org/IMyService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Login", ReplyAction="http://tempuri.org/IMyService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.InvalidLoginFault), Action="http://tempuri.org/IMyService/LoginInvalidLoginFaultFault", Name="InvalidLoginFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        bool Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Login", ReplyAction="http://tempuri.org/IMyService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Logout", ReplyAction="http://tempuri.org/IMyService/LogoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.InvalidLogoutFault), Action="http://tempuri.org/IMyService/LogoutInvalidLogoutFaultFault", Name="InvalidLogoutFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        void Logout(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Logout", ReplyAction="http://tempuri.org/IMyService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Add", ReplyAction="http://tempuri.org/IMyService/AddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.IncorrectDataFault), Action="http://tempuri.org/IMyService/AddIncorrectDataFaultFault", Name="IncorrectDataFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        void Add(string brand, string model, int productionYear, string engine, string transmission, string condition, int distanceTraveled, int price, string licensePlateNumber, string location, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Add", ReplyAction="http://tempuri.org/IMyService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(string brand, string model, int productionYear, string engine, string transmission, string condition, int distanceTraveled, int price, string licensePlateNumber, string location, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Delete", ReplyAction="http://tempuri.org/IMyService/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.IncorrectDataFault), Action="http://tempuri.org/IMyService/DeleteIncorrectDataFaultFault", Name="IncorrectDataFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Delete", ReplyAction="http://tempuri.org/IMyService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetUser", ReplyAction="http://tempuri.org/IMyService/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.UnsuccesfullSearchFault), Action="http://tempuri.org/IMyService/GetUserUnsuccesfullSearchFaultFault", Name="UnsuccesfullSearchFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        WCFWPFClient.MyServiceReference.Users GetUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetUser", ReplyAction="http://tempuri.org/IMyService/GetUserResponse")]
        System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.Users> GetUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetAllUser", ReplyAction="http://tempuri.org/IMyService/GetAllUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.UnsuccesfullSearchFault), Action="http://tempuri.org/IMyService/GetAllUserUnsuccesfullSearchFaultFault", Name="UnsuccesfullSearchFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        WCFWPFClient.MyServiceReference.Users[] GetAllUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetAllUser", ReplyAction="http://tempuri.org/IMyService/GetAllUserResponse")]
        System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.Users[]> GetAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetCar", ReplyAction="http://tempuri.org/IMyService/GetCarResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.UnsuccesfullSearchFault), Action="http://tempuri.org/IMyService/GetCarUnsuccesfullSearchFaultFault", Name="UnsuccesfullSearchFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        WCFWPFClient.MyServiceReference.CarRegistry GetCar(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetCar", ReplyAction="http://tempuri.org/IMyService/GetCarResponse")]
        System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.CarRegistry> GetCarAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetCarList", ReplyAction="http://tempuri.org/IMyService/GetCarListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.UnsuccesfullSearchFault), Action="http://tempuri.org/IMyService/GetCarListUnsuccesfullSearchFaultFault", Name="UnsuccesfullSearchFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        WCFWPFClient.MyServiceReference.CarRegistry[] GetCarList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetCarList", ReplyAction="http://tempuri.org/IMyService/GetCarListResponse")]
        System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.CarRegistry[]> GetCarListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/ChangePassword", ReplyAction="http://tempuri.org/IMyService/ChangePasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.IncorrectDataFault), Action="http://tempuri.org/IMyService/ChangePasswordIncorrectDataFaultFault", Name="IncorrectDataFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        bool ChangePassword(string name, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/ChangePassword", ReplyAction="http://tempuri.org/IMyService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string name, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Update", ReplyAction="http://tempuri.org/IMyService/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.IncorrectDataFault), Action="http://tempuri.org/IMyService/UpdateIncorrectDataFaultFault", Name="IncorrectDataFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        void Update(int id, string brand, string model, int productionYear, string engine, string transmission, string condition, int distanceTraveled, int price, string licensePlateNumber, string location, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Update", ReplyAction="http://tempuri.org/IMyService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(int id, string brand, string model, int productionYear, string engine, string transmission, string condition, int distanceTraveled, int price, string licensePlateNumber, string location, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/FindCarByLicensePlateNumber", ReplyAction="http://tempuri.org/IMyService/FindCarByLicensePlateNumberResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFWPFClient.MyServiceReference.UnsuccesfullSearchFault), Action="http://tempuri.org/IMyService/FindCarByLicensePlateNumberUnsuccesfullSearchFaultF" +
            "ault", Name="UnsuccesfullSearchFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Faults")]
        WCFWPFClient.MyServiceReference.CarRegistry FindCarByLicensePlateNumber(string licensePlateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/FindCarByLicensePlateNumber", ReplyAction="http://tempuri.org/IMyService/FindCarByLicensePlateNumberResponse")]
        System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.CarRegistry> FindCarByLicensePlateNumberAsync(string licensePlateNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceChannel : WCFWPFClient.MyServiceReference.IMyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceClient : System.ServiceModel.ClientBase<WCFWPFClient.MyServiceReference.IMyService>, WCFWPFClient.MyServiceReference.IMyService {
        
        public MyServiceClient() {
        }
        
        public MyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Register(string username, string password) {
            return base.Channel.Register(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password) {
            return base.Channel.RegisterAsync(username, password);
        }
        
        public bool Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void Logout(string username) {
            base.Channel.Logout(username);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string username) {
            return base.Channel.LogoutAsync(username);
        }
        
        public void Add(string brand, string model, int productionYear, string engine, string transmission, string condition, int distanceTraveled, int price, string licensePlateNumber, string location, string phoneNumber) {
            base.Channel.Add(brand, model, productionYear, engine, transmission, condition, distanceTraveled, price, licensePlateNumber, location, phoneNumber);
        }
        
        public System.Threading.Tasks.Task AddAsync(string brand, string model, int productionYear, string engine, string transmission, string condition, int distanceTraveled, int price, string licensePlateNumber, string location, string phoneNumber) {
            return base.Channel.AddAsync(brand, model, productionYear, engine, transmission, condition, distanceTraveled, price, licensePlateNumber, location, phoneNumber);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public WCFWPFClient.MyServiceReference.Users GetUser(string username) {
            return base.Channel.GetUser(username);
        }
        
        public System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.Users> GetUserAsync(string username) {
            return base.Channel.GetUserAsync(username);
        }
        
        public WCFWPFClient.MyServiceReference.Users[] GetAllUser() {
            return base.Channel.GetAllUser();
        }
        
        public System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.Users[]> GetAllUserAsync() {
            return base.Channel.GetAllUserAsync();
        }
        
        public WCFWPFClient.MyServiceReference.CarRegistry GetCar(int id) {
            return base.Channel.GetCar(id);
        }
        
        public System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.CarRegistry> GetCarAsync(int id) {
            return base.Channel.GetCarAsync(id);
        }
        
        public WCFWPFClient.MyServiceReference.CarRegistry[] GetCarList() {
            return base.Channel.GetCarList();
        }
        
        public System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.CarRegistry[]> GetCarListAsync() {
            return base.Channel.GetCarListAsync();
        }
        
        public bool ChangePassword(string name, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(name, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string name, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(name, oldPassword, newPassword);
        }
        
        public void Update(int id, string brand, string model, int productionYear, string engine, string transmission, string condition, int distanceTraveled, int price, string licensePlateNumber, string location, string phoneNumber) {
            base.Channel.Update(id, brand, model, productionYear, engine, transmission, condition, distanceTraveled, price, licensePlateNumber, location, phoneNumber);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(int id, string brand, string model, int productionYear, string engine, string transmission, string condition, int distanceTraveled, int price, string licensePlateNumber, string location, string phoneNumber) {
            return base.Channel.UpdateAsync(id, brand, model, productionYear, engine, transmission, condition, distanceTraveled, price, licensePlateNumber, location, phoneNumber);
        }
        
        public WCFWPFClient.MyServiceReference.CarRegistry FindCarByLicensePlateNumber(string licensePlateNumber) {
            return base.Channel.FindCarByLicensePlateNumber(licensePlateNumber);
        }
        
        public System.Threading.Tasks.Task<WCFWPFClient.MyServiceReference.CarRegistry> FindCarByLicensePlateNumberAsync(string licensePlateNumber) {
            return base.Channel.FindCarByLicensePlateNumberAsync(licensePlateNumber);
        }
    }
}
